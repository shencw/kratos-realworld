syntax = "proto3";

package realworld.v1;

import "google/api/annotations.proto";
import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";

option go_package = "github.com/shencw/kratos-realworld/api/realworld/v1;v1";

service RealWorld  {
  rpc Login (LoginRequest) returns (UserReply) {
    option(google.api.http) = {
      post: "/api/users/login",
      body: "*",
    };
  }

  rpc Register (RegisterRequest) returns (UserReply) {
    option(google.api.http) = {
      post: "/api/users",
      body: "*",
    };
  }

  rpc GetCurrentUser (google.protobuf.Empty) returns (UserReply) {
    option(google.api.http) = {
      get: "/api/user",
    };
  }

  rpc UpdateUser (UpdateUserRequest) returns (UserReply) {
    option(google.api.http) = {
      get: "/api/user",
    };
  }

  rpc GetProfile (GetProfileRequest) returns (ProfileReply) {
    option(google.api.http) = {
      get: "/api/profiles/{username}",
    };
  }

  rpc FollowUser (FollowUserRequest) returns (ProfileReply) {
    option(google.api.http) = {
      post: "/api/profiles/{username}/follow",
      body: "*",
    };
  }

  rpc UnfollowUser (UnfollowUserRequest) returns (ProfileReply) {
    option(google.api.http) = {
      delete: "/api/profiles/{username}/follow",
    };
  }

  rpc ListArticles (ListArticlesRequest) returns (MultipleArticlesReply) {
    option(google.api.http) = {
      get: "/api/articles",
    };
  }

  rpc FeedArticles (FeedArticlesRequest) returns (MultipleArticlesReply) {
    option(google.api.http) = {
      get: "/api/articles/feed",
    };
  }

  rpc GetArticle (GetArticleRequest) returns (SingleArticleReply) {
    option(google.api.http) = {
      get: "/api/articles/{slug}",
    };
  }

  rpc CreateArticle (CreateArticleRequest) returns (MultipleArticlesReply) {
    option(google.api.http) = {
      post: "/api/articles",
      body: "*",
    };
  }

  rpc UpdateArticle (UpdateArticleRequest) returns (SingleArticleReply) {
    option(google.api.http) = {
      put: "/api/articles/{slug}",
      body: "*",
    };
  }

  rpc DeleteArticle (DeleteArticleRequest) returns (SingleArticleReply) {
    option(google.api.http) = {
      delete: "/api/articles/{slug}",
    };
  }

  rpc AddComments (AddCommentsRequest) returns (SingleCommentReply) {
    option(google.api.http) = {
      post: "/api/articles/{slug}/comments",
      body: "*",
    };
  }

  rpc GetComments (GetCommentsRequest) returns (MultipleCommentsReply) {
    option(google.api.http) = {
      get: "/api/articles/{slug}/comments",
    };
  }

  rpc DeleteComment (DeleteCommentsRequest) returns (google.protobuf.Empty) {
    option(google.api.http) = {
      delete: "/api/articles/{slug}/comments.{id}",
    };
  }

  rpc FavoriteArticle (FavoriteArticleRequest)  returns (SingleArticleReply) {
    option(google.api.http) = {
      post: "/api/articles/{slug}/favorite",
      body: "*",
    };
  }

  rpc UnfavoriteArticle (UnfavoriteArticleRequest)  returns (SingleArticleReply) {
    option(google.api.http) = {
      delete: "/api/articles/{slug}/favorite",
    };
  }

  rpc GetTags (google.protobuf.Empty)  returns (TagListReply) {
    option(google.api.http) = {
      delete: "/api/tags",
    };
  }
}

message UserReply {
  message User {
    string email = 1;
    string token = 2;
    string username = 3;
    string bio = 4;
    google.protobuf.Any image = 5;
  }
  User user = 1;
}

message ProfileReply {
  message Profile{
    string username = 1;
    string bio = 2;
    string image = 3;
    bool following = 4;
  }
  Profile profile = 1;
}

message SingleArticleReply {
  message Author {
    string username = 1;
    string bio = 2;
    string image = 3;
    bool following = 4;
  }

  string slug = 1;
  string title = 2;
  string description = 3;
  string body = 4;
  repeated string tagList = 5;
  string createdAt = 6;
  string updatedAt = 7;
  bool favorited = 8;
  uint32 favoritesCount = 9;
  Author author = 10;
}

message MultipleArticlesReply {
  message Author {
    string username = 1;
    string bio = 2;
    string image = 3;
    bool following = 4;
  }

  message Articles {
    string slug = 1;
    string title = 2;
    string description = 3;
    string body = 4;
    repeated string tagList = 5;
    string createdAt = 6;
    string updatedAt = 7;
    bool favorited = 8;
    uint32 favoritesCount = 9;
    Author author = 10;
  }

  repeated Articles articles = 1;
  uint32 articlesCount = 2;
}

message SingleCommentReply {
  message Author {
    string username = 1;
    string bio = 2;
    string image = 3;
    bool following = 4;
  }

  message Comment {
    uint32 id = 1;
    string createdAt = 2;
    string updatedAt = 3;
    string body = 4;
    Author author = 5;
  }

  Comment comment = 1;
}

message MultipleCommentsReply{
  message Author {
    string username = 1;
    string bio = 2;
    string image = 3;
    bool following = 4;
  }

  message Comments {
    uint32 id = 1;
    string createdAt = 2;
    string updatedAt = 3;
    string body = 4;
    Author author = 5;
  }

  repeated Comments comments = 1;
}

message TagListReply {
  repeated string tags = 1;
}

message LoginRequest {
  message User {
    string email = 1;
    string password = 2;
  }
  User user = 1;
}

message RegisterRequest {
  message User {
    string username = 1;
    string email = 2;
    string password = 3;
  }
  User user = 1;
}

message UpdateUserRequest{
  message User {
    string email = 1;
    string bio = 2;
    string image = 3;
  }

  User user = 1;
}

message GetProfileRequest{
  string username = 1;
}

message FollowUserRequest{
  string username = 1;
}

message UnfollowUserRequest{
  string username = 1;
}

message ListArticlesRequest {
  string tag = 1;
  string author = 2;
  string favorited = 3;
  int64  limit = 4;
  int64  offset = 5;
}

message FeedArticlesRequest {
  int64  limit = 4;
  int64  offset = 5;
}

message GetArticleRequest {
  string slug = 1;
}

message CreateArticleRequest {
  message Article {
    string title = 1;
    string description = 2;
    string body = 3;
    repeated string tagList = 4;
  }

  Article article = 1;
}

message UpdateArticleRequest {
  message Article {
    string          title = 1;
    string          description = 2;
    string          body = 3;
    repeated string slug = 4;
  }

  Article article = 1;
  string  slug = 2;
}

message DeleteArticleRequest {
  string slug = 1;
}

message AddCommentsRequest {
  message Comment {
    string body = 1;
  }

  string  slug = 1;
  Comment comment = 2;
}

message GetCommentsRequest {
  string slug = 1;
}

message DeleteCommentsRequest {
  string slug = 1;
  int64 id = 2;
}

message FavoriteArticleRequest {
  string slug = 1;
}

message UnfavoriteArticleRequest {
  string slug = 1;
}
